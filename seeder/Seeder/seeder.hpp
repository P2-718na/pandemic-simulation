#ifndef SEEDER_SEEDER_HPP
#define SEEDER_SEEDER_HPP

#include <SFML/Graphics/Image.hpp>
#include <random>
#include <string>

#include "types.hpp"

namespace seeder {

struct seederEntity {
  int age;
  float symptomsResistance;
  float virusSpreadChance;
  float infectionResistance;
  std::string ai;
  pandemic::Coords homeLocation{};
  pandemic::Coords workLocation{};
};

using House = std::vector<seederEntity>;

class Seeder {
  sf::Image background_{};

  // Hold coordinates for points of interest in background image.
  std::vector<pandemic::Coords> houseLocations_{};
  std::vector<pandemic::Coords> workLocations_{};
  std::vector<pandemic::Coords> schoolLocations_{};
  std::vector<pandemic::Coords> uniLocations_{};

  // Hold all houses generated by populateHouses_().
  std::vector<House> houses_{};

  // Number of entities generated by generateEntities().
  int entityCount_{ 0 };

  // Generated string with all entities in printable text form.
  std::string printableEntities_{};

  // Return a random element from array of coordinates
  static const pandemic::Coords& randomLocation_(
    const std::vector<pandemic::Coords>& list) noexcept;

  // RNG generator
  // (See comments in config.hpp, they are the same).
  static std::default_random_engine& generator_() noexcept;

  // Other methods
  // Load background points of interest into memory (house, work, school,
  // university locations).
  void parseBackground_();

  // Generate all possible entities for the map.
  // (Generate one "house" for every possible house location, and save
  void populateHouses_();

  // Generate the printable text of an entity.
  static std::string makePrintable_(
    const seederEntity& entity, int uid, bool infected);

 public:
  // Constructors //////////////////////////////////////////////////////////////
  Seeder();
  explicit Seeder(const std::string& backgroundPath);

  // Methods ///////////////////////////////////////////////////////////////////
  // Try to generate entities in printable form.
  void generateEntities(int target, int infectedCount);

  static float randFloat(float a, float b) noexcept;
  static int randInt(int a, int b) noexcept;

  // Getters ///////////////////////////////////////////////////////////////////
  int entityCount() const noexcept;
  const std::string& printableEntities() const noexcept;
};

}  // namespace seeder

#endif  // define SEEDER_SEEDER_HPP
